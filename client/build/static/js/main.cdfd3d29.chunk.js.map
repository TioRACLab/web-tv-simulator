{"version":3,"sources":["actions/actionTypes.js","reducers/tvReducer.js","reducers/index.js","store/index.js","models/Channel.js","models/TV.js","actions/index.js","components/screen/Screen.js","components/TimingShow.js","components/volume/Volume.js","components/numberSelect/NumberSelect.js","components/tvApp/TVApp.js","reportWebVitals.js","index.js"],"names":["TV_CHANGE_VIDEO","TV_CHANGE_VOLUME","TV_CHANGE_SELECTOR","initialState","video","volume","selector","Reducers","combineReducers","tvState","state","action","type","Store","createStore","Channel","containsSignal","videos","length","this","number","randomVideos","sort","Math","random","shift","NoSignalVideo","TV","onChangeVideoEvent","onChangeVolumeEvent","onChangeSelectorEvent","channel","select","timeSelect","channels","onChangeVideo","onChangeVolume","onChangeSelector","data","map","item","c","parseInt","changeChannel","parseFloat","toFixed","channelsNumber","x","channelNumber","clearTimeSelect","toString","setTimeout","channelsFiltered","filter","noSignalChannel","padStart","clearTimeout","getNextVideo","tvChangeVideo","value","tvChangeVolume","tvChangeSelector","Screen","props","onVideoEnded","videoControl","current","currentTime","play","React","createRef","className","ref","autoPlay","onEnded","src","Component","connect","store","TimingShow","showLooping","Date","getTime","startDate","showTiming","clearInterval","looping","setState","show","setInterval","Volume","getCurrentVolume","volumeArray","realVolume","i","push","join","NumberSelect","isNaN","TVApp","onKeyUp","event","code","upVolume","downVolume","upChannel","downChannel","includes","selectChannel","startValues","getChannels","a","process","axios","get","response","updateValues","console","log","tabIndex","dispatch","bindActionCreators","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cdfd3d29.chunk.js","sourcesContent":["export const TV_CHANGE_VIDEO = \"TV_CHANGE_VIDEO\"\r\nexport const TV_CHANGE_VOLUME = \"TV_CHANGE_VOLUME\"\r\nexport const TV_CHANGE_SELECTOR = \"TV_CHANGE_SELECTOR\"","import { TV_CHANGE_VIDEO, TV_CHANGE_VOLUME, TV_CHANGE_SELECTOR } from '../actions/actionTypes'\r\n\r\nconst initialState = {\r\n  video: \"\",\r\n  volume: 0,\r\n  selector: \"\"\r\n}\r\n\r\nexport const tvReducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case TV_CHANGE_VIDEO:\r\n      return {\r\n          ...state,\r\n          video: action.video\r\n      }\r\n\r\n    case TV_CHANGE_VOLUME:\r\n        return {\r\n            ...state,\r\n            volume: action.volume\r\n        }\r\n\r\n    case TV_CHANGE_SELECTOR:\r\n        return {\r\n            ...state,\r\n            selector: action.selector\r\n        }\r\n\r\n    default:\r\n        return state\r\n  }\r\n};","import { combineReducers } from 'redux'\r\nimport { tvReducer } from './tvReducer'\r\n\r\nexport const Reducers = combineReducers({\r\n  tvState: tvReducer\r\n})","import { createStore } from 'redux'\r\nimport { Reducers } from '../reducers'\r\n\r\nexport const Store = createStore(Reducers)","class Channel {\r\n    constructor() {\r\n        this.number = 3\r\n        this.videos = []\r\n        this.randomVideos = []\r\n    }\r\n\r\n    containsSignal = () => {\r\n        return this.videos && this.videos.length > 0\r\n    }\r\n\r\n    getNextVideo() {\r\n        if (this.containsSignal()) {\r\n            if (this.randomVideos.length <= 0) {\r\n                this.randomVideos = [...this.videos]\r\n                this.randomVideos = this.randomVideos.sort(() => Math.random() - 0.5)\r\n            }\r\n\r\n            return this.randomVideos.shift()\r\n        }\r\n\r\n        return NoSignalVideo\r\n    }\r\n}\r\n\r\nconst NoSignalVideo = \"/videos/noSignal.mp4\"\r\n\r\nexport default Channel","import Channel from './Channel'\r\n\r\nclass TV {\r\n    constructor(onChangeVideoEvent, onChangeVolumeEvent, onChangeSelectorEvent) {\r\n        this.channel = new Channel()\r\n        this.volume = .7\r\n        this.select = \"\"\r\n        this.timeSelect = null\r\n        this.channels = []\r\n\r\n        this.onChangeVideoEvent = onChangeVideoEvent\r\n        this.onChangeVolumeEvent = onChangeVolumeEvent\r\n        this.onChangeSelectorEvent = onChangeSelectorEvent\r\n        \r\n        this.onChangeVideo()\r\n        this.onChangeVolume()\r\n        this.onChangeSelector()\r\n    }\r\n\r\n    updateValues(data) {\r\n        if (data.channels) {\r\n            this.channels = data.channels.map((item) => {\r\n                const c = new Channel()\r\n\r\n                c.number = parseInt(item.number)\r\n                c.videos = item.videos\r\n\r\n                return c\r\n            })\r\n\r\n            this.changeChannel(this.channel.number)\r\n        }\r\n\r\n    }\r\n\r\n    upVolume() {\r\n        this.volume += 0.1\r\n        this.volume = parseFloat(this.volume.toFixed(1))\r\n\r\n        if (this.volume > 1)\r\n            this.volume = 1\r\n\r\n        this.onChangeVolume()\r\n    }\r\n\r\n    downVolume() {\r\n        this.volume -= 0.1\r\n        this.volume = parseFloat(this.volume.toFixed(1))\r\n\r\n        if (this.volume < 0)\r\n            this.volume = 0\r\n\r\n        this.onChangeVolume()\r\n    }\r\n\r\n    upChannel() {\r\n        if (this.channels.length > 0) {\r\n            const channelsNumber = this.channels.map(c =>  c.number )\r\n            channelsNumber.sort()\r\n            \r\n            for (let x = 0; x < channelsNumber.length; x++) {\r\n                let channelNumber = channelsNumber[x]\r\n                if (channelNumber > this.channel.number) {\r\n                    this.changeChannel(channelNumber)\r\n                    return\r\n                }\r\n            }\r\n\r\n            this.changeChannel(channelsNumber[0])\r\n        }\r\n        else {\r\n            this.changeChannel(this.channel.number + 1)\r\n        }\r\n    }\r\n\r\n    downChannel() {\r\n\r\n        if (this.channels.length > 0) {\r\n            const channelsNumber = this.channels.map(c =>  c.number )\r\n            channelsNumber.sort()\r\n            \r\n            for (let x = channelsNumber.length - 1; x >= 0; x--) {\r\n                let channelNumber = channelsNumber[x]\r\n                if (channelNumber < this.channel.number) {\r\n                    this.changeChannel(channelNumber)\r\n                    return\r\n                }\r\n            }\r\n\r\n            this.changeChannel(channelsNumber[channelsNumber.length - 1])\r\n        }\r\n        else {\r\n            this.changeChannel(this.channel.number + 1)\r\n        }\r\n    }\r\n\r\n    selectChannel(number) {\r\n        this.clearTimeSelect()\r\n\r\n        if (this.select.length >= 2)\r\n            this.select = \"\"\r\n\r\n        this.select += number.toString()\r\n\r\n        if (this.select?.length >= 2) {\r\n            this.changeChannel(parseInt(this.select))\r\n        }\r\n        else {\r\n            this.timeSelect = setTimeout(() => {\r\n                this.changeChannel(parseInt(this.select))\r\n                this.clearTimeSelect()\r\n            }, 3000)\r\n\r\n            this.onChangeSelector()\r\n        }\r\n    }\r\n\r\n    changeChannel(number) {\r\n        const channelsFiltered = this.channels.filter(c => c.number === number)\r\n        \r\n        if (channelsFiltered.length <= 0) {\r\n            const noSignalChannel = new Channel()\r\n            noSignalChannel.number = number\r\n            this.channel = noSignalChannel\r\n        }\r\n        else {\r\n            this.channel = channelsFiltered[0]\r\n        }\r\n\r\n        this.select = number.toString().padStart(2, '0')\r\n        this.onChangeVideo()\r\n        this.onChangeSelector()\r\n    }\r\n\r\n    clearTimeSelect() {\r\n        if (this.timeSelect) {\r\n            clearTimeout(this.timeSelect)\r\n            this.timeSelect = null\r\n        }\r\n    }\r\n\r\n    onChangeVideo() {\r\n        if (this.onChangeVideoEvent)\r\n            this.onChangeVideoEvent(this.channel.getNextVideo())\r\n    }\r\n\r\n    onChangeVolume() {\r\n        if (this.onChangeVolumeEvent)\r\n            this.onChangeVolumeEvent(this.volume)\r\n    }\r\n\r\n    onChangeSelector() {\r\n        if (this.onChangeSelectorEvent)\r\n            this.onChangeSelectorEvent(this.select)\r\n    }\r\n}\r\n\r\nexport default TV","import {    TV_CHANGE_VIDEO,\r\n            TV_CHANGE_VOLUME,\r\n            TV_CHANGE_SELECTOR } from './actionTypes';\r\n\r\nexport const tvChangeVideo = value => ({\r\n    type: TV_CHANGE_VIDEO,\r\n    video: value\r\n})\r\n\r\nexport const tvChangeVolume = value => ({\r\n    type: TV_CHANGE_VOLUME,\r\n    volume: value\r\n})\r\n\r\nexport const tvChangeSelector = value => ({\r\n    type: TV_CHANGE_SELECTOR,\r\n    selector: value\r\n})","import './Screen.css'\r\nimport { connect } from 'react-redux'\r\nimport React, { Component } from 'react'\r\n\r\nclass Screen extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.videoControl = React.createRef()        \r\n    }\r\n\r\n    onVideoEnded = () => {\r\n        if (this.videoControl.current) {\r\n            this.videoControl.current.currentTime = 0\r\n            this.videoControl.current.play()\r\n        }\r\n        \r\n        this.props.TV.onChangeVideo()\r\n    }\r\n    \r\n    render() {\r\n        const { video, volume } = this.props\r\n\r\n        if (this.videoControl.current)\r\n            this.videoControl.current.volume = volume\r\n\r\n        return <video className=\"Screen\" ref={this.videoControl} autoPlay={true} onEnded={this.onVideoEnded} src={video} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => ({\r\n    video: store.tvState.video,\r\n    volume: store.tvState.volume\r\n})\r\n\r\nexport default connect(mapStateToProps)(Screen)","import { Component } from 'react'\r\n\r\nclass TimingShow extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            show: false,\r\n            startDate: new Date()\r\n        }\r\n\r\n        this.showTiming = 4\r\n        this.looping = null\r\n    }\r\n\r\n    show() {\r\n        setTimeout(() => { this.setState({show: true, startDate: new Date()}) }, 10)\r\n\r\n        if (!this.looping) {\r\n            this.looping = setInterval(this.showLooping, 250)\r\n        }\r\n    }\r\n\r\n    showLooping = () => {\r\n        const diff = ((new Date()).getTime() - this.state.startDate.getTime()) / 1000\r\n\r\n        if (diff > this.showTiming) {\r\n            clearInterval(this.looping)\r\n            this.looping = null\r\n            this.setState({show: false})\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default TimingShow","import './Volume.css'\r\nimport React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport TimingShow from '../TimingShow'\r\n\r\nclass Volume extends TimingShow {\r\n    constructor(props) {\r\n        super(props)\r\n        const { volume } = this.props\r\n        this.volume = volume\r\n    }\r\n\r\n    getCurrentVolume = (volume) => {\r\n        const volumeArray = []\r\n        const realVolume = volume * 10\r\n\r\n        for (let i = 0; i < 10; i++) {\r\n            if (i < realVolume)\r\n                volumeArray.push(\"█\")\r\n            else\r\n                volumeArray.push(\"■\")\r\n        }\r\n\r\n        return volumeArray.join(\" \")\r\n    }\r\n    \r\n    render() {\r\n        const { volume } = this.props\r\n\r\n        if (this.volume !== volume) {\r\n            this.volume = volume\r\n            this.show()\r\n        }\r\n\r\n        return (\r\n            <div className={`Volume ${this.state.show && \"show\"}`}>\r\n                <div className=\"volumePosition\">\r\n                    <p className=\"title\">Volume</p>\r\n                    <p className=\"current\">{this.getCurrentVolume(volume)}</p>         \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => ({\r\n    volume: store.tvState.volume\r\n})\r\n\r\nexport default connect(mapStateToProps)(Volume)","import React from 'react'\r\nimport './NumberSelect.css'\r\nimport { connect } from 'react-redux'\r\nimport TimingShow from '../TimingShow'\r\n\r\nclass NumberSelect extends TimingShow {\r\n    constructor(props) {\r\n        super(props)\r\n        const { selector } = this.props\r\n        this.selector = selector\r\n    }\r\n    \r\n    render() {\r\n        const { selector } = this.props\r\n\r\n        if (selector && !isNaN(selector) && this.selector !== selector) {\r\n            this.selector = selector\r\n            this.show()\r\n        }\r\n\r\n        return (\r\n            <div className={`NumberSelect ${this.state.show && \"show\"}`}>\r\n                <p>{selector}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => ({\r\n    selector: store.tvState.selector\r\n})\r\n\r\nexport default connect(mapStateToProps)(NumberSelect)","import './tv.css'\r\nimport axios from 'axios'\r\nimport TV from '../../models/TV'\r\nimport { connect } from 'react-redux'\r\nimport React, {Component} from 'react'\r\nimport { tvChangeVideo, tvChangeVolume, tvChangeSelector } from '../../actions'\r\nimport { bindActionCreators } from 'redux'\r\nimport Screen from '../../components/screen/Screen'\r\nimport Volume from '../../components/volume/Volume'\r\nimport NumberSelect from '../../components/numberSelect/NumberSelect'\r\n\r\nclass TVApp extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.startValues()\r\n    }\r\n\r\n    startValues() {\r\n        const { tvChangeVideo, tvChangeVolume, tvChangeSelector } = this.props\r\n        this.TV = new TV(tvChangeVideo, tvChangeVolume, tvChangeSelector)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getChannels()\r\n    }\r\n\r\n    async getChannels() {\r\n        try {\r\n            const url = process.env.REACT_APP_CHANNELS\r\n            const response = await axios.get(url)\r\n            this.TV.updateValues(response.data)\r\n        }\r\n        catch {\r\n            console.log(\"Ops!!!\")\r\n        }\r\n    }\r\n\r\n    onKeyUp = (event) => {\r\n        if (event.code === \"NumpadAdd\"\r\n            || event.code === \"ArrowRight\") {\r\n                this.TV.upVolume()\r\n        }\r\n\r\n        if (event.code === \"NumpadSubtract\"\r\n            || event.code === \"ArrowLeft\") {\r\n                this.TV.downVolume()\r\n        }\r\n\r\n        if (event.code === \"ArrowUp\")\r\n            this.TV.upChannel()\r\n\r\n        if (event.code === \"ArrowDown\")\r\n            this.TV.downChannel()\r\n\r\n        if (event.code.includes(\"Digit\"))\r\n            this.TV.selectChannel(parseInt(event.code[5]))\r\n\r\n        if (event.code.includes(\"Numpad\"))\r\n            this.TV.selectChannel(parseInt(event.code[6]))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"TV\" tabIndex=\"0\" onKeyUp={this.onKeyUp}>\r\n                <Screen TV={this.TV} />\r\n                <Volume TV={this.TV} />\r\n                <NumberSelect TV={this.TV} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => ({\r\n    volume: store.tvState.volume\r\n})\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators({ tvChangeVideo, tvChangeVolume, tvChangeSelector }, dispatch)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TVApp)","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css'\nimport React from 'react'\nimport { Store } from './store'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport TVApp from './components/tvApp/TVApp'\nimport reportWebVitals from './reportWebVitals'\n\n\nReactDOM.render(\n  <Provider store={Store}>\n    <TVApp />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}